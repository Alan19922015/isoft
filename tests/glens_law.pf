!
!  glens_law.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module glens_law_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  use glens_law_mod, only: glens_law_viscosity
  use test_utils, only: test_field
  implicit none

  integer, parameter :: resolution = 50
  real(r8), parameter :: lambda_d = 0.37_r8
  real(r8), parameter :: big_x = 1.0_r8/lambda_d

  @TestCase
  type, extends(testcase), public :: viscosity_test
    type(glens_law_viscosity) :: visc1, visc2
    type(cheb1d_vector_field) :: velocity1, velocity2, velocity3, velocity4
    type(cheb1d_scalar_field) :: invar1, invar2, invar3, invar4
    real(r8) :: time1, time2, temp1, temp2
    real(r8) :: bval1, bval2, index1, index2
    integer :: numpoints = resolution
  contains
    procedure :: setup
  end type viscosity_test

contains

  pure function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = 1._r8
  end function velocity1

  pure function invar1(location) result(invar)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: invar
    invar = 0._r8
  end function invar1

  pure function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(2))
    velocity(1) = 1._r8
    velocity(1) = 5.e7_r8
  end function velocity2

  pure function invar2(location) result(invar)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: invar
    invar = 0._r8
  end function invar2

  pure function velocity3(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = location(1)
  end function velocity3

  pure function invar3(location) result(invar)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: invar
    invar = 1._r8
  end function invar3

  pure function velocity4(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(2))
    velocity(1) = sin(location(1)/6.283185307_r8)
    velocity(2) = cos(location(1)/6.283185307_r8)
  end function velocity4

  pure function invar4(location) result(invar)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: invar
    invar = abs(cos(location(1)/6.283185307_r8))/6.283185307_r8
  end function invar4

  subroutine setup(this)
    class(viscosity_test), intent(inout) :: this
    this%velocity1 = cheb1d_vector_field(this%numpoints,velocity1,0._r8,1._r8)
    this%velocity2 = cheb1d_vector_field(this%numpoints,velocity2,0._r8,1._r8,extra_dims=1)
    this%velocity3 = cheb1d_vector_field(this%numpoints,velocity3,0._r8,1._r8)
    this%velocity4 = cheb1d_vector_field(this%numpoints,velocity4,0._r8,1._r8,extra_dims=1)
    this%invar1 = cheb1d_scalar_field(this%numpoints,invar1,0._r8,1._r8)
    this%invar2 = cheb1d_scalar_field(this%numpoints,invar2,0._r8,1._r8)
    this%invar3 = cheb1d_scalar_field(this%numpoints,invar3,0._r8,1._r8)
    this%invar4 = cheb1d_scalar_field(this%numpoints,invar4,0._r8,1._r8)
    this%time1 = 1.0d5
    this%time2 = -5.7_r8
    this%temp1 = 1.0_r8
    this%temp2 = -3.5_r8
    this%bval1 = 5.0_r8
    this%bval2 = 1.1e4_r8
    this%index1 = 3._r8
    this%index2 = 1.5_r8
    this%visc1 = glens_law_viscosity(this%bval1, this%index1)
    this%visc2 = glens_law_viscosity(this%bval2, this%index2)
  end subroutine setup

  @Test
  subroutine test_viscosity1(this)
    class(viscosity_test), intent(inout) :: this
    type(cheb1d_scalar_field) :: expected, actual
    expected = 0.5_r8*this%bval1*this%invar1**(1/this%index1)
    actual = this%visc1%ice_viscosity(this%velocity1,this%temp1,this%time1)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval1*this%invar2**(1/this%index1)
    actual = this%visc1%ice_viscosity(this%velocity2,this%temp1,this%time1)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval1*this%invar3**(1/this%index1)
    actual = this%visc1%ice_viscosity(this%velocity3,this%temp1,this%time1)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval1*this%invar4**(1/this%index1)
    actual = this%visc1%ice_viscosity(this%velocity4,this%temp1,this%time1)
    call test_field(expected, actual)
    actual = this%visc1%ice_viscosity(this%velocity4,this%temp2,this%time2)
    call test_field(expected, actual)
  end subroutine test_viscosity1

  @Test
  subroutine test_viscosity2(this)
    class(viscosity_test), intent(inout) :: this
    type(cheb1d_scalar_field) :: expected, actual
    expected = 0.5_r8*this%bval2*this%invar1**(1/this%index2)
    actual = this%visc2%ice_viscosity(this%velocity1,this%temp2,this%time2)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval2*this%invar2**(1/this%index2)
    actual = this%visc2%ice_viscosity(this%velocity2,this%temp2,this%time2)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval2*this%invar3**(1/this%index2)
    actual = this%visc2%ice_viscosity(this%velocity3,this%temp2,this%time2)
    call test_field(expected, actual)
    expected = 0.5_r8*this%bval2*this%invar4**(1/this%index2)
    actual = this%visc2%ice_viscosity(this%velocity4,this%temp2,this%time2)
    call test_field(expected, actual)
    actual = this%visc2%ice_viscosity(this%velocity4,this%temp1,this%time1)
    call test_field(expected, actual)
  end subroutine test_viscosity2

end module glens_law_test

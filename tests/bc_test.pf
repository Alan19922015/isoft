!
!  bc_test.f90
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module bc_test
  use pfunit_mod
  use factual_mod, only: cheb1d_scalar_field, cheb1d_vector_field
  use plume_boundary_mod, only: plume_boundary
  use glacier_boundary_mod, only: glacier_boundary
  use iso_fortran_env, only: r8 => real64
  implicit none

contains

  @Test
  subroutine test_defaults()
    type(plume_boundary)      :: test_plume
    type(glacier_boundary)    :: test_glacier
    type(cheb1d_scalar_field) :: scalar
    type(cheb1d_vector_field) :: vector
    
    
    @assertEqual([0,0],test_plume%thickness_lower_bound(),message='Incorrect lower bounds returned for thickness.')
    @assertEqual([0,0],test_plume%thickness_upper_bound(),message='Incorrect upper bounds returned for thickness.')
    @assertEqual([0,0],test_plume%velocity_lower_bound(),message='Incorrect lower bounds returned for velocity.')
    @assertEqual([0,0],test_plume%velocity_upper_bound(),message='Incorrect upper bounds returned for velocity.')
    @assertEqual([0,0],test_plume%temperature_lower_bound(),message='Incorrect lower bounds returned for temperature.')
    @assertEqual([0,0],test_plume%temperature_upper_bound(),message='Incorrect upper bounds returned for temperature.')
    @assertEqual([0,0],test_plume%salinity_lower_bound(),message='Incorrect lower bounds returned for salinity.')
    @assertEqual([0,0],test_plume%salinity_upper_bound(),message='Incorrect upper bounds returned for salinity.')
    @assertEqual(0,size(test_plume%boundary_residuals(scalar,vector,scalar,scalar,0.0_r8)),message='Non-empty residual.')
    
    @assertEqual([0,0],test_glacier%thickness_lower_bound(),message='Incorrect lower bounds returned for thickness.')
    @assertEqual([0,0],test_glacier%thickness_upper_bound(),message='Incorrect upper bounds returned for thickness.')
    @assertEqual([0,0],test_glacier%velocity_lower_bound(),message='Incorrect lower bounds returned for velocity.')
    @assertEqual([0,0],test_glacier%velocity_upper_bound(),message='Incorrect upper bounds returned for velocity.')
    @assertEqual(0,size(test_glacier%boundary_residuals(scalar,vector,scalar,0.0_r8)),message='Non-empty residual.')
  end subroutine test_defaults

end module bc_test

!
!  bc_test.f90
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module bc_test
  use pfunit_mod
  use factual_mod, only: cheb1d_scalar_field, cheb1d_vector_field, uniform_scalar_field, &
                         uniform_vector_field
  use plume_boundary_mod, only: plume_boundary
  use glacier_boundary_mod, only: glacier_boundary
  use boundary_types_mod, only: free_boundary
  use iso_fortran_env, only: r8 => real64
  implicit none

contains

  @Test
  subroutine test_defaults()
    type(plume_boundary)      :: test_plume
    type(glacier_boundary)    :: test_glacier
    type(cheb1d_scalar_field) :: scalar
    type(cheb1d_vector_field) :: vector
    type(uniform_scalar_field) :: uscalar
    type(uniform_vector_field) :: uvector
    integer :: i, btype, bdepth
    
    do i = -3, 3
      btype = -500
      bdepth = -500
      call test_plume%thickness_bound_info(i,btype,bdepth)
      @assertEqual(free_boundary, btype, message='Incorrect boundary type returned for plume thickness.')
      @assertEqual(0, bdepth, message='Incorrect boundary depth returned for plume thickness.')
      uscalar = test_plume%thickness_bound(i)
      @assertEqual(0.0_r8, uscalar%get_value(), message='Nonzero thickness boundary field returned.')
    end do
    do i = -3, 3
      btype = -500
      bdepth = -500
      call test_plume%velocity_bound_info(i,btype,bdepth)
      @assertEqual(free_boundary, btype, message='Incorrect boundary type returned for plume velocity.')
      @assertEqual(0, bdepth, message='Incorrect boundary depth returned for plume velocity.')
      uvector = test_plume%velocity_bound(i)
      @assertEqual([0.0_r8,0.0_r8], uvector%get_value(), message='Nonzero velocity boundary field returned.')
    end do
    do i = -3, 3
      btype = -500
      bdepth = -500
      call test_plume%temperature_bound_info(i,btype,bdepth)
      @assertEqual(free_boundary, btype, message='Incorrect boundary type returned for plume temperature.')
      @assertEqual(0, bdepth, message='Incorrect boundary depth returned for plume temperature.')
      uscalar = test_plume%temperature_bound(i)
      @assertEqual(0.0_r8, uscalar%get_value(), message='Nonzero temperature boundary field returned.')
    end do
    do i = -3, 3
      btype = -500
      bdepth = -500
      call test_plume%thickness_bound_info(i,btype,bdepth)
      @assertEqual(free_boundary, btype, message='Incorrect boundary type returned for plume thickness.')
      @assertEqual(0, bdepth, message='Incorrect boundary depth returned for plume thickness.')
      uscalar = test_plume%salinity_bound(i)
      @assertEqual(0.0_r8, uscalar%get_value(), message='Nonzero salinity boundary field returned.')
    end do
    
    @assertEqual([0,0],test_glacier%thickness_lower_bound(),message='Incorrect lower bounds returned for thickness.')
    @assertEqual([0,0],test_glacier%thickness_upper_bound(),message='Incorrect upper bounds returned for thickness.')
    @assertEqual([0,0],test_glacier%velocity_lower_bound(),message='Incorrect lower bounds returned for velocity.')
    @assertEqual([0,0],test_glacier%velocity_upper_bound(),message='Incorrect upper bounds returned for velocity.')
    @assertEqual(0,size(test_glacier%boundary_residuals(scalar,vector,scalar,0.0_r8)),message='Non-empty residual.')
  end subroutine test_defaults

end module bc_test

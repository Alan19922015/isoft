!
!  jacobiab_block_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module jacobian_block_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, cheb1d_scalar_field
  use jacobian_block_mod, only: jacobian_block
  use boundary_types_mod, only: dirichlet, neumann
  implicit none

  integer, parameter :: resolution = 50
  
  @TestCase
  type, extends(testcase), public :: test_jacobian
    type(jacobian_block)      :: block1, block2, block3, block4, &
                                 block5, block6, block7, block8, &
                                 block9, block10
    type(cheb1d_scalar_field) :: ones, contents, vector, rhs1, &
                                 rhs2, rhs3, rhs4, rhs5, rhs6, &
                                 dvector, d2vector
  contains
    procedure :: setup
  end type test_jacobian

contains
  
  pure function f(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f
    f = location(1)**2 + 3._r8*location(1) - 5._r8
  end function f

  pure function f_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_dx
    f_dx = 2._r8*location(1) + 3._r8
  end function f_dx

  pure function f_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_d2x
    f_d2x = 2._r8
  end function f_d2x
  
  pure function g(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: g
    g = 1._r8 - location(1) - exp(location(1))
  end function g
  
  pure function g_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: g_dx
    g_dx = -1._r8 - exp(location(1))
  end function g_dx

  pure function g_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: g_d2x
    g_d2x = -exp(location(1))
  end function g_d2x

  pure function zeros(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: zeros
    zeros = 0._r8
  end function zeros
  
  pure function ones(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: ones
    ones = 1._r8
  end function ones

  pure function prod1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod1
    prod1 = f_dx(location)*g(location) + f(location)*g_dx(location)
  end function prod1

  pure function prod2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod2
    prod2 = f_dx(location)*g_dx(location) + f(location)*g_d2x(location)
  end function prod2

  pure function prod3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod3
    prod3 = (f_dx(location) + 1._r8)*g(location) + f(location)*g_dx(location)
  end function prod3

  pure function prod4(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod4
    prod4 = f_dx(location)*g_dx(location) + f(location)*g_d2x(location) + 5._r8*g(location)
  end function prod4

  pure function prod5(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod5
    prod5 = prod1(location) + prod2(location)
  end function prod5

  pure function prod6(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: prod6
    prod6 = 3*f_dx(location)*g(location) + f(location)*g_dx(location)
  end function prod6

  subroutine bounds1(contents, derivative, rhs, boundary_locs, boundary_types, &
                     boundary_values)
    class(scalar_field), intent(in)                :: contents
    class(scalar_field), intent(in)                :: derivative
    class(scalar_field), intent(in)                :: rhs
    integer, dimension(:), allocatable, intent(in) :: boundary_locs
    integer, dimension(:), allocatable, intent(in) :: boundary_types
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    boundary_values = [g_dx([-1._r8])]
  end subroutine bounds1

  subroutine bounds2(contents, derivative, rhs, boundary_locs, boundary_types, &
                     boundary_values)
    class(scalar_field), intent(in)                :: contents
    class(scalar_field), intent(in)                :: derivative
    class(scalar_field), intent(in)                :: rhs
    integer, dimension(:), allocatable, intent(in) :: boundary_locs
    integer, dimension(:), allocatable, intent(in) :: boundary_types
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    boundary_values = [g_dx([1._r8]), g([-1._r8])]
  end subroutine bounds2
  
  subroutine bounds4(contents, derivative, rhs, boundary_locs, boundary_types, &
                     boundary_values)
    class(scalar_field), intent(in)                :: contents
    class(scalar_field), intent(in)                :: derivative
    class(scalar_field), intent(in)                :: rhs
    integer, dimension(:), allocatable, intent(in) :: boundary_locs
    integer, dimension(:), allocatable, intent(in) :: boundary_types
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    boundary_values = [g([1._r8])]
  end subroutine bounds4
  
  subroutine bounds5(contents, derivative, rhs, boundary_locs, boundary_types, &
                     boundary_values)
    class(scalar_field), intent(in)                :: contents
    class(scalar_field), intent(in)                :: derivative
    class(scalar_field), intent(in)                :: rhs
    integer, dimension(:), allocatable, intent(in) :: boundary_locs
    integer, dimension(:), allocatable, intent(in) :: boundary_types
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    boundary_values = [g([1._r8]), g([-1._r8])]
  end subroutine bounds5

  subroutine setup(this)
    class(test_jacobian), intent(inout) :: this
    type(jacobian_block), save, target :: tmp
    this%contents = cheb1d_scalar_field(resolution, f)
    this%ones = cheb1d_scalar_field(resolution, ones)
    this%block1 = jacobian_block(this%contents, 1, boundary_locs=[resolution], &
                                 boundary_types=[neumann], &
                                 boundary_operations=bounds1)
    this%block2 = jacobian_block(this%contents, 1, 1, [1,resolution], &
                                 [neumann,dirichlet], bounds2)
    this%block3 = jacobian_block(this%contents, 2)
    this%block4 = jacobian_block(this%ones, 1, boundary_locs=[1], &
                                 !boundary_types=[dirichlet], &
                                 boundary_operations=bounds4)
    this%block5 = jacobian_block(this%ones, 1, 1, [dirichlet,dirichlet], &
                                 [1,resolution])
    this%block6 =  jacobian_block(this%contents, 1, boundary_locs=[resolution], &
                                  boundary_types=[neumann], &
                                  boundary_operations=bounds1) + 1._r8
    this%block7 = jacobian_block(this%contents, 1, 1, [1,resolution], &
                                 [neumann,dirichlet]) + 5._r8
    this%block8 = jacobian_block(this%contents, 1, boundary_locs=[resolution], &
                                  boundary_types=[neumann], &
                                  boundary_operations=bounds1) + this%ones
    tmp = this%block1
    this%block9 = jacobian_block(this%contents, 1, 1, [1,resolution], &
                                 [neumann,dirichlet], bounds2) + tmp
    this%block10 = jacobian_block(this%contents, 1, boundary_locs=[resolution], &
                                 boundary_types=[neumann], &
                                 boundary_operations=bounds1, coef=3._r8)
    ! Create vectors for solving/multiplying with
    ! Must mess around with some of them to make boundary conditions work.
    this%vector = cheb1d_scalar_field(resolution, g)
    this%dvector = cheb1d_scalar_field(resolution, g_dx)
    call this%dvector%set_element(1,g([1._r8]))
    this%d2vector = cheb1d_scalar_field(resolution, g_d2x)
    this%rhs1 = cheb1d_scalar_field(resolution, prod1)
    call this%rhs1%set_element(resolution,g_dx([-1._r8]))
    this%rhs2 = cheb1d_scalar_field(resolution, prod2)
    call this%rhs2%set_element(1,g_dx([1._r8]))
    call this%rhs2%set_element(resolution,g([-1._r8]))
    this%rhs3 = cheb1d_scalar_field(resolution, prod3)
    call this%rhs3%set_element(resolution,g_dx([-1._r8]))
    this%rhs4 = cheb1d_scalar_field(resolution, prod4)
    call this%rhs4%set_element(1,g_dx([1._r8]))
    call this%rhs4%set_element(resolution,g([-1._r8]))
    this%rhs5 = cheb1d_scalar_field(resolution, prod5)
    call this%rhs5%set_element(1,g_dx([1._r8]))
    call this%rhs5%set_element(resolution,g([-1._r8]))
    this%rhs6 = cheb1d_scalar_field(resolution, prod6)
    call this%rhs6%set_element(resolution,g_dx([-1._r8]))
  end subroutine setup

  @Test
  subroutine test_jacobian_multiply(this)
    class(test_jacobian), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual
    real(r8), dimension(:), allocatable :: zero_array
    actual = this%block1 * this%vector
    @assertEqual(this%rhs1%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block2 * this%vector
    @assertEqual(this%rhs2%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block3 * this%vector
    allocate(zero_array(actual%raw_size()))
    zero_array = 0.0_r8
    @assertEqual(zero_array,actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block6 * this%vector
    @assertEqual(this%rhs3%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block7 * this%vector
    call this%rhs4%set_element(1,0._r8)
    call this%rhs4%set_element(resolution,0._r8)
    @assertEqual(this%rhs4%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block8 * this%vector
    @assertEqual(this%rhs3%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block9 * this%vector
    @assertEqual(this%rhs5%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
    actual = this%block10 * this%vector
    @assertEqual(this%rhs6%raw(),actual%raw(),tolerance=1.e-9_r8,message='Jacobian block multiplication returns wrong result.')
  end subroutine test_jacobian_multiply

  @Test
  subroutine test_jacobian_solve(this)
    class(test_jacobian), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual
    actual = this%block4%solve_for(this%dvector)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=1.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block1%solve_for(this%rhs1)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=6.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block1%solve_for(this%rhs1)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=6.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block2%solve_for(this%rhs2)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=1.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block6%solve_for(this%rhs3)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=5.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block7%solve_for(this%rhs4)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=1.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block8%solve_for(this%rhs3)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=5.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block9%solve_for(this%rhs5)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=5.e-2_r8,message='Failed to solve Jacobian block system.')
    actual = this%block10%solve_for(this%rhs6)
    @assertEqual(this%vector%raw(),actual%raw(),tolerance=1.e-2_r8,message='Failed to solve Jacobian block system.')
  end subroutine test_jacobian_solve

end module jacobian_block_test

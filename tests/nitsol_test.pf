!
!  nitsol_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module nitsol_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use array_pointer_mod, only: array_1d
  use chebyshev_mod
  use nitsol_mod
  use f95_lapack
  implicit none

  integer, parameter  :: points = 50
  integer, parameter  :: n_tot = 3*points
  integer, parameter  :: kdmax = 20, nnimax = 200
  real(r8), parameter :: lower_bound = -1.0_r8, upper_bound = 0.0_r8
  real(r8), parameter :: u_g = 2.0_r8, q_g = 8.0_r8
  real(r8), parameter :: tol = 1e-8_r8 * n_tot

  real(r8), dimension(points), protected :: xvals

contains

  !@Test
  subroutine test_solve_dallaston2015()
    real(r8), dimension(n_tot) :: x_guess, f_guess, jacob, dx, dxprime
    real(r8), dimension(n_tot) :: expected
    real(r8), dimension(n_tot) :: residual
    real(r8), dimension(:), allocatable :: worker
    real(r8), dimension(1) :: real_param
    integer, dimension(1) :: int_param
    integer, dimension(10) :: input
    integer, dimension(6) :: output
    integer :: flag, i
    real(r8), parameter :: delta = 0.00001_r8

    input = 0
    input(1) = nnimax
    input(4) = kdmax
    input(5) = 0
!    input(7) = 1
!    input(8) = 1
!    input(10) = 3
    xvals = collocation_points(points-1,lower_bound,upper_bound)

    expected(1:points)            = xvals - lower_bound
    expected(points+1:2*points)   = q_g**(1.0_r8/3.0_r8)
    expected(2*points+1:3*points) = q_g**(2.0_r8/3.0_r8)
    call test_f(n_tot,expected,residual,real_param,int_param,flag)
    @assertEqual(flag,0,message='Failed to calculate residual of expected solution')
    @assertEqual(expected*0.0_r8,residual,tolerance=tol,message='Expected solution did not have zero residual')

    ! Note that as the resolution increases, the problem becomes
    ! increasingly difficult to solve with even fairly small
    ! perturbations from the known solution.
    x_guess = expected + 0.1_r8*[sin(xvals*3.141592_r8*2), &
                                 cos(xvals*3.141592_r8),   &
                                 sin(xvals*3.141592_r8/2)]

    ! Check that the preconditioner will return the expected result
    ! when given a residual of zero and when the previous guess is
    ! approximately correct.
    dx = 0.1_r8
    call test_f(n_tot,x_guess,f_guess,real_param,int_param,flag)
    call test_f(n_tot,x_guess + delta*dx,jacob,real_param,int_param,flag)
    jacob = (jacob-f_guess)/delta
    call preconditioner(n_tot, x_guess, f_guess, 1, jacob, dxprime, real_param, int_param, flag)
    !do i=1,n_tot
    !  print*, dx(i), dxprime(i)
    !end do
    
    !@assertEqual(expected,x_guess,tolerance=tol,message='Preconditioner not providing inverse to F.')
    
    allocate( worker(n_tot*(kdmax+5) + kdmax*(kdmax+3)) )
    iplvl = 0
    call nitsol(n_tot, x_guess, test_f, preconditioner, tol, tol, input, &
                output, worker, real_param, int_param, flag, ddot, dnrm2)
    iplvl = 0
    @assertEqual(0,flag,message='NITSOL failed to find solution')
    @assertEqual(expected,x_guess,tolerance=tol,message='NITSOL did not find correct solution.')
    
  contains

    subroutine test_f(n, xcur, fcur, rpar, ipar, itrmf)
      ! Dallaston's et al. (2015) greatly simplified steady state plume
      ! problem.
      integer, intent(in)                   :: n
        !! Dimension of the problem
      real(r8), dimension(n), intent(in)    :: xcur
        !! Array of length `n` containing the current \(x\) value
      real(r8), dimension(n), intent(out)   :: fcur
        !! Array of length `n` containing f(xcur) on output
      real(r8), dimension(*), intent(inout) :: rpar
        !! Parameter/work array
      integer, dimension(*), intent(inout)  :: ipar
        !! Parameter/work array
      integer, intent(out)                  :: itrmf
        ! Termination flag. 0 means normal termination, 1 means
        ! failure to produce f(xcur)
      integer :: nodes
      
      if (mod(n,3) /= 0) then
        itrmf = 1
        return
      end if
      nodes = n / 3
  
      fcur(1:nodes) = xcur(1:nodes) * xcur(nodes+1:2*nodes)
      call differentiate_1d(fcur(1:nodes),xvals,1)
      fcur(1:nodes) = fcur(1:nodes) - xcur(nodes+1:2*nodes)
  
      fcur(nodes+1:2*nodes) = xcur(1:nodes) * xcur(nodes+1:2*nodes)**2
      call differentiate_1d(fcur(nodes+1:2*nodes),xvals,1)
      fcur(nodes+1:2*nodes) = fcur(nodes+1:2*nodes) - xcur(2*nodes+1:3*nodes)
  
      fcur(2*nodes+1:3*nodes) = xcur(2*nodes+1:3*nodes) * xcur(nodes+1:2*nodes)
      call differentiate_1d(fcur(2*nodes+1:3*nodes),xvals,1)
  
      fcur(nodes)   = xcur(nodes)*xcur(2*nodes)
      fcur(2*nodes) = xcur(2*nodes) - u_g
      fcur(3*nodes) = xcur(3*nodes) - q_g/u_g
  
      itrmf = 0
    end subroutine test_f
  
    subroutine preconditioner(n, xcur, fcur, ijob, v, z, rpar, ipar, itrmjv)
      integer, intent(in)                   :: n
        !! Dimension of the problem
      real(r8), dimension(n), intent(in)    :: xcur
        !! Array of lenght `n` containing the current $x$ value
      real(r8), dimension(n), intent(in)    :: fcur
        !! Array of lenght `n` containing the current \(f(x)\) value
      integer, intent(in)                   :: ijob
        !! Integer flat indicating which product is desired. 0
        !! indicates \(z = J\vec{v}\). 1 indicates \(z = P^{-1}\vec{v}\).
      real(r8), dimension(n), intent(in)    :: v
        !! An array of length `n` to be multiplied
      real(r8), dimension(n), intent(out)   :: z
        !! An array of length n containing the desired product on
        !! output.
      real(r8), dimension(*), intent(inout) :: rpar
        !! Parameter/work array 
      integer, dimension(*), intent(inout)  :: ipar
        !! Parameter/work array
      integer, intent(out)                  :: itrmjv
        !! Termination flag. 0 indcates normal termination, 1
        !! indicatesfailure to prodce $J\vec{v}$, and 2 indicates
        !! failure to produce \(P^{-1}\vec{v}\)
      integer  :: nodes
      real(r8) :: xs
      real(r8), dimension(n/3-2) :: upper, diag_l, diag_u
      real(r8), dimension(n/3-1) :: diag
      real(r8), dimension(n/3)   :: d_u
  
      if (mod(n,3) /= 0) then
        itrmjv = 2
        return
      end if
      nodes = n / 3
      xs = xvals(nodes-1) - lower_bound
  
      if (ijob == 0) then
        itrmjv = 0
        return
      end if
  
      associate(q => v(1:nodes), r => v(nodes+1:2*nodes), s => v(2*nodes+1:3*nodes), &
                D => xcur(1:nodes), U => xcur(nodes+1:2*nodes),                      &
                B => xcur(2*nodes+1:3*nodes), x => xvals(:))
        z(nodes)   = (q(nodes) - D(nodes)*r(nodes))/U(nodes)
        z(2*nodes) = r(nodes)
        z(3*nodes) = s(nodes)
        upper = -1._r8/(x(1:nodes-2) - x(2:nodes-1))
        d_u = U
        call differentiate_1d(d_u,x,1)
        d_u(1:nodes-2) = d_u(1:nodes-2) - upper
        d_u(nodes-1)   = d_u(nodes-1) + 1._r8/(x(nodes) - x(nodes-1))
  
        z(1:nodes-1) = q(1:nodes-1)
        z(nodes-1)   = z(nodes-1) + q(nodes)/(x(nodes) - x(nodes-1))
        diag_u       = upper
        diag         = d_u(1:nodes-1)
        diag_l       = 0._r8
        call la_gtsv(diag_l,diag,diag_u,z(1:nodes-1))
        z(nodes+1:2*nodes-1) = r(1:nodes-1)
        z(2*nodes) = z(2*nodes) + 2._r8*D(nodes)*r(nodes)/(x(nodes) - x(nodes-1))
        diag_u             = 2._r8*D(1:nodes-2)*upper
        diag               = D(1:nodes-1)
        call differentiate_1d(diag,x,1)
        diag               = 2._r8*D(1:nodes-1)*d_u(1:nodes-1) + 2._r8*U(1:nodes-1)*diag
        diag_l             = 0._r8
        call la_gtsv(diag_l,diag,diag_u,z(nodes+1:2*nodes-1))
        z(2*nodes+1:3*nodes-1) = s(1:nodes-1)
        z(3*nodes-1)           = z(3*nodes-1) + s(nodes)/(x(nodes) - x(nodes-1))
        diag_u                 = upper
        diag                   = d_u(1:nodes-1)
        diag_l                 = 0._r8
        call la_gtsv(diag_l,diag,diag_u,z(2*nodes+1:3*nodes-1))
      end associate
      itrmjv = 0
    end subroutine preconditioner
  end subroutine test_solve_dallaston2015


  @Test
  subroutine test_gmres_identity()
    real(r8), dimension(points) :: actual, expected
    real(r8) :: res
    integer :: i, flag
    actual = 0.0_r8
    expected = [((i*0.2_r8), i=1,points)]**2 - 1.0
    call gmres_solve(actual, identity, expected, res, flag)
    @assertEqual(0,flag,message='GMRES routine failed to converge')
    @assertLessThanOrEqual(res,1e-8_r8*points,message='Residual greater than tolerance.')
    @assertEqual(expected,actual,tolerance=5*1.e-8_r8,message='Actual solution is different from expected one.')
    actual = 0.0_r8
    call gmres_solve(actual, identity, expected, res, flag, tol=1.e-10_r8*points, &
                     resid_update=1, iter_max=20, krylov_dim=5)
    @assertEqual(0,flag,message='GMRES routine failed to converge')
    @assertLessThanOrEqual(res,1e-10_r8*points,message='Residual greater than tolerance.')
    @assertEqual(expected,actual,tolerance=5*1.e-10_r8,message='Actual solution is different from expected one.')
  contains
    function identity(v, xcur, rhs, rpar, ipar, success)
      real(r8), dimension(:), intent(in)    :: v
        !! The vector to be multiplied
      real(r8), dimension(:), intent(in)    :: xcur
        !! Array containing the current estimate of the independent
        !! variables in the linear system. This may not be needed, but
        !! is provided just in case.
      real(r8), dimension(:), intent(in)    :: rhs
        !! Array containing the right hand side of the linear
        !! system. This may not be needed, but is provided just in
        !! case.
      real(r8), dimension(*), intent(inout) :: rpar
        !! Parameter/work array 
      integer, dimension(*), intent(inout)  :: ipar
        !! Parameter/work array
      logical, intent(out)                  :: success
        !! Indicates whether operation was completed succesfully
      real(r8), dimension(size(xcur))       :: identity
        !! Result of the operation
      identity = v
      success = .true.
    end function identity
  end subroutine test_gmres_identity
  
  @Test
  subroutine test_gmres_integrate()
    real(r8), dimension(points) :: actual, expected, rhs, xvals
    real(r8) :: res
    integer :: i, flag
    logical :: scs
    real(r8), dimension(1) :: rtmp
    integer, dimension(1) :: itmp
    xvals = collocation_points(points-1,lower_bound,upper_bound)
    expected = 0.25*xvals**2
    rhs = 0.5*xvals
    actual = expected*0.9_r8 + 0.01_r8
    call gmres_solve(actual, diff, rhs, res, flag, precond=pre)
    @assertEqual(0,flag,message='GMRES routine failed to converge')
    @assertLessThanOrEqual(res,1e-8_r8*points,message='Residual greater than tolerance.')
    @assertEqual(expected,actual,tolerance=5*1.e-8_r8,message='Actual solution is different from expected one.')
  contains
    function diff(v, xcur, rhs, rpar, ipar, success)
      real(r8), dimension(:), intent(in)    :: v
        !! The vector to be multiplied
      real(r8), dimension(:), intent(in)    :: xcur
        !! Array containing the current estimate of the independent
        !! variables in the linear system. This may not be needed, but
        !! is provided just in case.
      real(r8), dimension(:), intent(in)    :: rhs
        !! Array containing the right hand side of the linear
        !! system. This may not be needed, but is provided just in
        !! case.
      real(r8), dimension(*), intent(inout) :: rpar
        !! Parameter/work array 
      integer, dimension(*), intent(inout)  :: ipar
        !! Parameter/work array
      logical, intent(out)                  :: success
        !! Indicates whether operation was completed succesfully
      real(r8), dimension(size(xcur))       :: diff
        !! Result of the operation
      diff = v
      call differentiate_1d(diff,xvals,1)
      diff(1) = v(1)
      success = .true.
    end function diff
    function pre(v, xcur, rhs, rpar, ipar, success)
      real(r8), dimension(:), intent(in)    :: v
        !! The vector to be multiplied
      real(r8), dimension(:), intent(in)    :: xcur
        !! Array containing the current estimate of the independent
        !! variables in the linear system. This may not be needed, but
        !! is provided just in case.
      real(r8), dimension(:), intent(in)    :: rhs
        !! Array containing the right hand side of the linear
        !! system. This may not be needed, but is provided just in
        !! case.
      real(r8), dimension(*), intent(inout) :: rpar
        !! Parameter/work array 
      integer, dimension(*), intent(inout)  :: ipar
        !! Parameter/work array
      logical, intent(out)                  :: success
        !! Indicates whether operation was completed succesfully
      real(r8), dimension(size(xcur))       :: pre
        !! Result of the operation
      real(r8), dimension(size(xcur)) :: diag
      real(r8), dimension(size(xcur)-1) :: sub_diag, sup_diag
      pre = v
      diag = 0.0_r8
      sup_diag(2:) = 1._r8/(xvals(3:points) - xvals(1:points-2))
      sup_diag(1) = 0._r8
      sub_diag(:points-2) = -sup_diag(2:points-1)
      sub_diag(points-1) = -1._r8/(xvals(points) - xvals(points-1))
      diag(1) = 1._r8
      diag(points) = -sub_diag(points-1)
      call la_gtsv(sub_diag,diag,sup_diag,pre)
      success = .true.
    end function pre
  end subroutine test_gmres_integrate

end module nitsol_test

!
!  newtonian_viscosity.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module newtonian_viscosity_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  use jenkins1991_entrainment_mod, only: jenkins1991_entrainment

  integer, parameter :: resolution = 50

  @TestCase
  type, extends(testcase), public :: viscosity_test
    type(newtonian_viscosity) :: visc1, visc2
    type(cheb1d_vector_field) :: velocity1, velocity2
    real(r8) :: time1, time2, temp1, temp2
    real(r8) :: viscval1, viscval2
    integer :: numpoints = resolution
  contains
    procedure :: setup
 end type viscosity_test

contains
  
  pure function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = sqrt(1._r8 + big_x - big_x*(1._r8 - location(1)/big_x))
  end function velocity1

  pure function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(2))
    velocity(1) = sin(location(1)/6.283185307_r8)
    velocity(2) = cos(location(1)/6.283185307_r8)
  end function velocity2

  subroutine setup(this)
    class(test_entrain), intent(inout) :: this
    this%velocity1 = cheb1d_vector_field(this%numpoints,velocity1)
    this%velocity2 = cheb1d_vector_field(this%numpoints,velocity2,extra_dims=1)
    this%time1 = 1.0d5
    this%time2 = -5.7_r8
    this%temp1 = 1.0_r8
    this%temp2 = -3.5_r8
    this%visc1 = newtonian_viscosity(this%visc1)
    this%visc2 = newtonian_viscosity(this%visc2)
  end subroutine setup

  @Test
  subroutine test_entrainment_values(this)
    class(test_viscosity), intent(inout) :: this

  end subroutine test_entrainment_values

end module newtonian_viscosity_test

!
!  jenkins1991_entrainment_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module jenkins1991_entrainment_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  use jenkins1991_entrainment_mod, only: jenkins1991_entrainment
  implicit none

  integer, parameter :: resolution = 50
  real(r8), parameter :: lambda_d = 0.37_r8
  real(r8), parameter :: big_x = 1.0_r8/lambda_d

  @TestCase
  type, extends(testcase), public :: test_entrain
    type(jenkins1991_entrainment) :: melt1, melt2
    type(cheb1d_scalar_field) :: thickness, depth
    type(cheb1d_vector_field) :: velocity1, velocity2
    real(r8) :: time1, time2, coef1, coef2
    integer :: numpoints = resolution
  contains
    procedure :: setup
 end type test_entrain

contains
  
  pure function depth(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: depth
    depth = 1._r8 - exp(location(1))
  end function depth

  pure function depth_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: depth_dx
    depth_dx = -exp(location(1))
  end function depth_dx
  
  pure function thickness(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = location(1)**2
  end function thickness
  
  pure function thickness_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness_dx
    thickness_dx = 2.0_r8*location(1)
  end function thickness_dx

  pure function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = velocity1_norm(location)
  end function velocity1

  pure function velocity1_norm(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: velocity
    velocity = sqrt(1._r8 + big_x - big_x*(1._r8 - location(1)/big_x)**2)
  end function velocity1_norm

  pure function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(2))
    velocity(1) = sin(location(1)/6.283185307_r8)
    velocity(2) = cos(location(1)/6.283185307_r8)
  end function velocity2

  pure function velocity2_norm(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), allocatable :: velocity
    velocity = 1.0_r8
  end function velocity2_norm

  subroutine setup(this)
    class(test_entrain), intent(inout) :: this
    this%thickness = cheb1d_scalar_field(this%numpoints,thickness,0._r8,big_x)
    this%depth = cheb1d_scalar_field(this%numpoints,depth,0._r8,big_x)
    this%velocity1 = cheb1d_vector_field(this%numpoints,velocity1,0._r8,big_x)
    this%velocity2 = cheb1d_vector_field(this%numpoints,velocity2,0._r8,big_x,extra_dims=1)
    this%time1 = 1.0d5
    this%time2 = -5.7_r8
    this%coef1 = 1.0_r8
    this%coef2 = -3.5_r8
    this%melt1 = jenkins1991_entrainment(this%coef1)
    this%melt2 = jenkins1991_entrainment(this%coef2)
  end subroutine setup

  @Test
  subroutine test_entrainment_values(this)
    class(test_entrain), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual, expected
    actual = this%melt1%entrainment_rate(this%velocity1,this%thickness,this%depth,this%time1)
    expected = cheb1d_scalar_field(this%numpoints,ent1,0._r8,big_x)
    @assertTrue(actual==expected,message='Incorrect entrainment rate calculated.')
    actual = this%melt2%entrainment_rate(this%velocity2,this%depth,this%thickness,this%time2)
    expected = cheb1d_scalar_field(this%numpoints,ent2,0._r8,big_x)
    @assertTrue(actual==expected,message='Incorrect entrainment rate calculated.')
  contains
    pure function ent1(location)
      real(r8), dimension(:), intent(in) :: location
      real(r8) :: ent1
      ent1 = this%coef1*velocity1_norm(location)*abs(depth_dx(location))
    end function ent1

    pure function ent2(location)
      real(r8), dimension(:), intent(in) :: location
      real(r8) :: ent2
      ent2 = this%coef2*velocity2_norm(location)*abs(thickness_dx(location))
    end function ent2
  end subroutine test_entrainment_values

end module jenkins1991_entrainment_test

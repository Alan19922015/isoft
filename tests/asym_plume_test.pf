!
!  plume_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module asym_plume_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use test_utils, only: test_field
  use asymmetric_plume_mod, only: asym_plume, plume_shape
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  use entrainment_mod, only: abstract_entrainment
  use melt_relationship_mod, only: abstract_melt_relationship
  use plume_boundary_mod, only: plume_boundary
  use ambient_mod, only: ambient_conditions
  use equation_of_state_mod, only: equation_of_state
  use dallaston2015_melt_mod, only: melt => dallaston2015_melt
  use ave_one_equation_melt_mod, only: ave_one_equation_melt
  use jenkins1991_entrainment_mod, only: entrainment => jenkins1991_entrainment
  use uniform_ambient_mod, only: ambient => uniform_ambient_conditions
  use simple_plume_boundary_mod, only: boundary => simple_plume_boundary
  use upstream_plume_mod, only: upstream_plume_boundary
  use ave_linear_eos_mod, only: ave_linear_eos
  use prescribed_eos_mod, only: prescribed_eos
  use specfun_mod, only: ei
  implicit none

  real(r8), parameter :: lambda_d = 0.37_r8
  real(r8), parameter :: big_x = 1.0_r8/lambda_d
  real(r8), parameter :: q_g = 8.0_r8
  real(r8), parameter :: eps_m = 0._r8!6.9e-4_r8
  real(r8), parameter :: beta = 0.024
  !real(r8), parameter :: thermal_melt_coef = (1.0_r8 + beta)/eps_m
  real(r8), parameter :: r = 1.12_r8
  real(r8), parameter :: h_g = 1._r8
  real(r8), parameter :: length = 2.5_r8
  real(r8), parameter :: nu_val = 1.e2_r8
  real(r8), parameter :: offset = 0.1_r8
  real(r8), parameter :: alpha = q_g**(1._r8/3._r8)/nu_val
  real(r8), parameter :: xi = r*exp(alpha*offset)*(1._r8 + beta)* &
                              q_g**(1._r8/3._r8)/(2._r8*h_g)

  integer, parameter  :: resolution = 100
  real(r8), parameter :: perturbation = 1.e-1_r8
  real(r8), parameter :: frequency = 3.141592_r8
  
  real(r8), parameter :: discharge = 1e-3_r8, &
                         off_set = 0.001_r8, &
                         fresh_sal = -2035.3_r8, &
                         melt_temp = -54.92_r8

  @TestCase
  type, extends(testcase), public :: test_plume
    type(asym_plume) :: plume1, plume2, plume3
    type(plume_shape) :: shape1, shape2
    integer     :: nodes = resolution
    real(r8)    :: lower1 = 0.0_r8, upper1 = length
    real(r8)    :: lower2 = 0.0_r8, upper2 = 6.0_r8
    real(r8)    :: delta = 0.0_r8, nu = nu_val
    real(r8)    :: mu = 0.0_r8
  contains
    procedure :: setup
  end type test_plume

contains

  pure function depth1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: depth1
    depth1 = h_g*(1._r8 - location(1))/r!h_g*(2._r8 - exp(alpha*location(1)))/r
  end function depth1

  pure function depth2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: depth2
    depth2 = 2.0_r8 - 0.2_r8*r*location(1)
  end function depth2

  pure function thickness1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness1
    thickness1 = depth1([0.0_r8]) - depth1(location+offset)
  end function thickness1

  pure function thickness2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness2
    !thickness2 = 0.0896833845433_r8
    thickness2 = 1.29621922040051E-002_r8 + depth2([0._r8]) - depth2(location)
  end function thickness2

  pure function thickness3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness3
    thickness3 = (1._r8 + perturbation*sin(frequency*location(1))) &
               * thickness1(location)
  end function thickness3

  pure function velocity(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    velocity = [q_g**(1.0/3.0), 0._r8]
  end function velocity

  pure function velocity2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity2
    velocity2 = [1.19665819239534_r8 + 0.2_r8*location(1), 0._r8]
  end function velocity2

  pure function velocity3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity3
    velocity3 = (1._r8 + perturbation*sin(frequency*location(1))) &
              * velocity(location)
  end function velocity3

  pure function s1(x)
    real(r8), intent(in) :: x
    real(r8) :: s1
    s1 = exp(alpha*x)
  end function s1

  pure function s2(x)
    real(r8), intent(in) :: x
    real(r8) :: s2
    s2 = s1(x)*ei(-alpha*(x+offset))
  end function s2

  pure function salinity1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: salinity1
    real(r8), parameter :: salt_st = 10._r8
    real(r8) :: a12, a21, a22, phi, theta
    a12 = ei(-alpha*offset)
    a21 = alpha*s1(length)
    a22 = alpha*s2(length) + exp(-alpha*offset)/(length + offset)
    phi = -a21 * salt_st/(a22 - a21*a12)
    theta = salt_st - a12*phi
    salinity1 = theta*s1(location(1)) + phi*s2(location(1))
  end function salinity1

  pure function salinity2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: salinity2
    salinity2 = -134.732191723951_r8*thickness2([0._r8])/thickness2(location)
  end function salinity2

  pure function salinity3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: salinity3
    salinity3 = (1._r8 + perturbation*sin(frequency*location(1))) &
              * salinity1(location)
  end function salinity3

  pure function temp1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: temp1
    real(r8), parameter :: temp_st = 1._r8, zeta = r*(beta+1._r8)
    real(r8) :: a12, a21, a22, phi, theta
    a12 = ei(-alpha*offset)
    a21 = alpha*s1(length)
    a22 = alpha*s2(length) + exp(-alpha*offset)/(length + offset)
    phi = -a21 * (temp_st + zeta)/(a22 - a21*a12)
    theta = temp_st + zeta - a12*phi
    temp1 = theta*s1(location(1)) + phi*s2(location(1)) - zeta
  end function temp1

  pure function temp2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: temp2
    temp2 = -7.19243701408836_r8
  end function temp2

  pure function temp3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: temp3
    temp3 = (1._r8 + perturbation*cos(frequency*location(1))) &
          * temp1(location)
  end function temp3

  pure subroutine bound_vals(time, D, U, T, S)
    !! Calculates the inflow properties for the plume. In this routine
    !! they are non-oscillating.
    real(r8), intent(in)                :: time
      !! The time at which the boundary values are being calculated
    real(r8), intent(out)               :: D
      !! Plume thickness boundary condition
    real(r8), dimension(:), allocatable, intent(out) :: U
      !! Plume velocity boundary condition
    real(r8), intent(out)               :: T
      !! Plume temperature boundary condition
    real(r8), intent(out)               :: S
      !! Plume salinity boundary condition
    D = off_set
    allocate(U(2))
    U = [discharge/off_set, 0._r8]
    S = fresh_sal
    T = melt_temp
  end subroutine bound_vals

  subroutine setup(this)
    class(test_plume), intent(inout) :: this
    real(r8), dimension(1,2) :: domain1, domain2
    class(abstract_entrainment), allocatable :: ent
    class(abstract_melt_relationship), allocatable :: mel
    class(ambient_conditions), allocatable :: amb
    class(equation_of_state), allocatable :: eos
    class(plume_boundary), allocatable :: bound
    type(cheb1d_vector_field) :: vel
    type(cheb1d_scalar_field) :: tmp

    allocate(ent, source=entrainment(1.0_r8))
    allocate(mel, source=melt(beta,eps_m))
    allocate(amb, source=ambient(0.0_r8,0.0_r8))
    tmp = cheb1d_scalar_field(this%nodes, thickness1, this%lower1, this%upper1)
    allocate(prescribed_eos :: eos)
    eos = prescribed_eos(q_g**(2._r8/3._r8), -1.0_r8, tmp)
    allocate(bound, source=boundary(thickness1([0.0_r8]),[q_g**(1.0/3.0),0._r8], &
                                    temp1([0.0_r8]),salinity1([0.0_r8])))
    domain1(1,:) = [this%lower1, this%upper1]
    domain2(1,:) = [this%lower2, this%upper2]
    vel = cheb1d_vector_field(this%nodes,velocity,domain1(1,1),domain1(1,2),1)
    call mel%solve_for_melt(vel,tmp,tmp,tmp,tmp,0.0_r8)
    call this%plume1%initialise(domain1, [this%nodes], thickness1, velocity,  &
                                temp1, salinity1, this%shape2, ent, mel, amb, eos, bound, &
                                this%delta, this%nu, this%mu)
    this%shape2%f_D1 = 1.9991755333706656_r8
    this%shape2%f_D2 = 1.9991755333706656_r8
    this%shape2%f_U1 = 0.04154711175460632_r8
    this%shape2%f_U2 = 0.51764047501977217_r8
    this%shape2%f_V1 = 0.0002439945404628958_r8
    this%shape2%f_V2 = 1.20963261459201_r8
    this%shape2%f_S1 = 1.0000000000000029_r8
    this%shape2%f_S2 = 1.0000000000000027_r8
    this%shape2%f_T1 = 0.99999999999998535_r8
    this%shape2%f_T2 = 0.99999999999998745_r8
    this%shape2%f_Up = -0.00013732384325493285_r8
    this%shape2%f_Vp = 1.7443474546768867e-05_r8
    this%shape2%f_Sp = -8.3266726846886741e-17_r8
    this%shape2%f_Tp = -2.2204460492503131e-16_r8
    this%shape2%a_DU = 0.82256333964220518_r8
    this%shape2%a_DV = 1.1232511849111053_r8
    this%shape2%a_DU2 = 0.75622309187949455_r8
    this%shape2%a_DUV = 0.89065734053294643_r8
    this%shape2%a_D2 = 1.3116912658796012_r8
    this%shape2%a_UabsU = 0.96832787178172786_r8
    this%shape2%a_UabsV = 1.0403285105459319_r8
    this%shape2%a_DUS = 0.8225633396422074_r8
    this%shape2%a_DUT = 0.82256333964219486_r8
    this%shape2%a_UabsT = 0.9999999999999869_r8
    this%shape2%a_DS = 1.0000000000000016_r8
    this%shape2%a_DT = 0.99999999999998612_r8
    this%shape2%a_DS_t = 0.99999999999998812_r8
    this%shape2%a_DT_t = 1.0000000000000029_r8
    allocate(ent, source=entrainment(1.0_r8))
    allocate(mel, source=ave_one_equation_melt(0.0182_r8, 4.86e-4_r8, &
                                               -2035.3_r8, -54.92_r8, &
                                               this%shape2%a_UabsT))
    allocate(amb, source=ambient(0.0_r8,0.0_r8))
    allocate(eos, &
             source=ave_linear_eos(3.05e5_r8, 0._r8, 0._r8, &
             1.409e-6_r8, 1.336e-5_r8, this%shape2%a_DS, this%shape2%a_DT, &
             this%shape2%a_DS_t, this%shape2%a_DT_t ))
    allocate(bound, &
             source=upstream_plume_boundary(bound_vals, &
             0.05_r8, [1.0_r8, 1.0_r8, 1.0_r8, 1.e3_r8, 1.e1_r8]))
    call this%plume2%initialise(domain2, [this%nodes], thickness2, velocity2, &
                                temp2, salinity2, this%shape2, ent, mel,    &
                                amb, eos, bound, 0.036_r8, 3.69e-2_r8,      &
                                0.799_r8, 1.12_r8, -9.96_r8, 1.0_r8)
    allocate(ent, source=entrainment(1.0_r8))
    allocate(mel, source=melt(beta,eps_m))
    allocate(amb, source=ambient(0.0_r8,0.0_r8))
    allocate(prescribed_eos :: eos)
    eos = prescribed_eos(q_g**(2._r8/3._r8), -1.0_r8, tmp)
    !allocate(eos, source=linear_eos(1.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, -1.0_r8))
    allocate(bound, source=boundary(thickness1([0.0_r8]),[q_g**(1.0/3.0),0._r8], &
                                    temp1([0.0_r8]),salinity1([0.0_r8])))
    call this%plume3%initialise(domain1, [this%nodes], thickness3, velocity3,  &
                                temp3, salinity3, this%shape1, ent, mel, amb, eos, bound,  &
                                this%delta, this%nu, this%mu)
  end subroutine setup

  @Test
  subroutine test_basal_melt(this)
    !! Test that the plume calculates the correct basal melt rate
    !! given how it was initialised.
    class(test_plume), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_melt
    type(cheb1d_scalar_field) :: expected_melt
    actual_melt = this%plume1%basal_melt()
    expected_melt = cheb1d_scalar_field(this%nodes, m1, this%lower1, this%upper1)
    call test_field(expected_melt, actual_melt)
  contains
    pure function m1(x)
      real(r8), dimension(:), intent(in) :: x
      real(r8) :: m1
      real(r8), dimension(1) :: mtmp
      mtmp = velocity(x)
      m1 = eps_m*abs(mtmp(1))
    end function m1
  end subroutine test_basal_melt

  @Test
  subroutine test_basal_drag(this)
    !! Test that the plume calculates the correct basal drag coefficient
    !! given how it was initialised.
    class(test_plume), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_drag
    type(cheb1d_scalar_field) :: expected_drag
    ! Implement once I have uniform fields.
  end subroutine test_basal_drag

  @Test
  subroutine test_water_density(this)
    !! Test that the plume returns the water density for which it was
    !! initialised.
    class(test_plume), intent(inout) :: this
    @assertEqual(1.0_r8, this%plume1%water_density(), message='Incorrect water density returned.')
  end subroutine test_water_density

  @Test
  subroutine test_update(this)
    !! Test two plumes have the same state vectors after one is updated
    !! with the state vector of the other.
    class(test_plume), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: state_vector
    @assertEqual(this%plume1%data_size(),size(this%plume1%state_vector()),message='State vector of wrong size')
    @assertNotAll(this%plume1%state_vector()==this%plume2%state_vector(),message='Plume returning wronge state vector')
    call this%plume2%update(this%plume1%state_vector())
    @assertEqual(this%plume1%state_vector(),this%plume2%state_vector(),message='State vector not updated.')
  end subroutine test_update

  @Test
  subroutine test_solve_trivial(this)
    !! Tests that the correct solution will be found for a plume when
    !! Coriolis force is turned off. This is the same test as for the
    !! standard plume.
    class(test_plume), intent(inout) :: this
    real(r8), dimension(:), allocatable :: actual, expected
    integer :: i, steps
    type(cheb1d_scalar_field) :: thickness
    real(r8) :: density, temperature, time
    logical :: success
    thickness = r * cheb1d_scalar_field(this%nodes, depth1, this%lower1, this%upper1)
    density = 1.0_r8 / r
    temperature = 0.0_r8
    time = 1.0_r8
    expected = this%plume1%state_vector()
    call this%plume1%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    actual = this%plume1%state_vector()
    @assertEqual(expected,actual,message='Plume did not reach correct solution.',tolerance=1.e-4_r8)
    call this%plume3%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    actual = this%plume3%state_vector()
    @assertEqual(expected,actual,message='Plume did not reach correct solution.',tolerance=1.e-4_r8)
  end subroutine test_solve_trivial

  @Test
  subroutine test_solve(this)
    !! Tests that the solution returns the predicted asymptotic values
    !! for the specified rotational simulation.
    class(test_plume), intent(inout) :: this
    real(r8), dimension(:), allocatable :: actual
    integer :: i, steps
    type(cheb1d_scalar_field) :: thickness
    real(r8) :: density, temperature, time, phi
    logical :: success
    thickness = cheb1d_scalar_field(this%nodes, depth2, this%lower2, this%upper2)
    density = 1.0_r8 / r
    temperature = 0.0_r8
    time = 1.0_r8
    phi = this%plume2%phi
    this%plume2%phi = 0._r8
    call this%plume2%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    this%plume2%phi = phi/100._r8
    call this%plume2%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    this%plume2%phi = phi/20._r8
    call this%plume2%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    this%plume2%phi = phi/5._r8
    call this%plume2%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    this%plume2%phi = phi
    call this%plume2%solve(thickness, density, temperature, time, success)
    @assertTrue(success,message='Iterative solution of plume failed.')
    actual = this%plume2%state_vector()
    @assertEqual(0.0896833845433_r8, actual(1),message='Incorrect asymptotic value of D',tolerance=1e-3_r8)
    @assertEqual(0.111064770394_r8, actual(this%nodes+1),message='Incorrect asymptotic value of U',tolerance=1e-3_r8)
    @assertEqual(0.264810549375_r8, actual(2*this%nodes+1),message='Incorrect asymptotic value of V',tolerance=1e-3_r8)
    @assertEqual(-4.68316672729_r8, actual(5*this%nodes+1),message='Incorrect asymptotic value of T',tolerance=2e-5_r8)
    @assertEqual(-4.51195246596_r8, actual(7*this%nodes+1),message='Incorrect asymptotic value of S',tolerance=6e-5_r8)
  end subroutine test_solve

end module asym_plume_test

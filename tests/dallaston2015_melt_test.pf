!
!  dallaston2015_melt_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module dallaston2015_melt_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  use dallaston2015_melt_mod, only: dallaston2015_melt

  integer, parameter :: resolution = 50

  @TestCase
  type, extends(testcase), public :: test_melt
    type(dallaston2015_melt) :: melt1, melt2
    type(cheb1d_scalar_field) :: pressure, temperature, salinity, plume_thickness
    type(cheb1d_vector_field) :: velocity1, velocity2
    real(r8) :: time1, time2, beta1, beta2
    integer :: numpoints = resolution
  contains
    procedure :: setup
  end type test_melt

contains
  
  pure function pressure(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    real(r8), dimension(2) :: vel
    vel = velocity1(location)
    thickness = (1._r8 - location(1)/big_x)/vel(1)
  end function pressure
  
  pure function temperature(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = 1.0_r8/abs(location(1))
  end function temperature

  pure function salinity(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    real(r8), dimension(2) :: vel
    vel = velocity2(location)
    thickness = (1._r8 - location(1)/big_x)/vel(1)
  end function salinity
  
  pure function plume_thickness(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = 1.0_r8/abs(location(1))**2
  end function plume_thickness

  pure function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = sqrt(1._r8 + big_x - big_x*(1._r8 - location(1)/big_x))
  end function velocity1

  pure function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(2))
    velocity(1) = sin(location(1)/6.283185307)
    velocity(2) = cos(location(1)/6.283185307)
  end function velocity2

  subroutine setup(this)
    class(test_melt), intent(inout) :: this
    this%pressure = cheb1d_scalar_field(this%numpoints,pressure)
    this%temperature =  cheb1d_scalar_field(this%numpoints,temperature)
    this%salinity = cheb1d_scalar_field(this%numpoints,salinity)
    this%plume_thickness = cheb1d_scalar_field(this%numpoints,plume_thickness)
    this%velocity1 = cheb1d_vector_field(this%numpoints,velocity1)
    this%velocity2 = cheb1d_vector_field(this%numpoints,velocity2,extra_dims=1)
    this%time1 = 1.0d5
    this%time2 = -5.7_r8
    this%beta1 = 1.0_r8
    this%beta2 = -3.5_r8
    this%melt1 = dallaston2015_melt(this%beta1)
    this%melt2 = dallaston2015_melt(this%beta2)
  end subroutine setup

  @Test
  subroutine test_has_heat(this)
    class(test_melt), intent(inout) :: this
    @assertTrue(this%melt1%has_heat_terms(),message='Not providing terms for heat equation.')
    @assertTrue(this%melt2%has_heat_terms(),message='Not providing terms for heat equation.')
    call solve_melts(this)
    @assertTrue(this%melt1%has_heat_terms(),message='Not providing terms for heat equation.')
    @assertTrue(this%melt2%has_heat_terms(),message='Not providing terms for heat equation.')
  end subroutine test_has_heat
  
  @Test
  subroutine test_has_salt(this)
    class(test_melt), intent(inout) :: this
    @assertFalse(this%melt1%has_salt_terms(),message='Providing terms for salt equation.')
    @assertFalse(this%melt2%has_salt_terms(),message='Providing terms for salt equation.')
    call solve_melts(this)
    @assertFalse(this%melt1%has_salt_terms(),message='Providing terms for salt equation.')
    @assertFalse(this%melt2%has_salt_terms(),message='Providing terms for salt equation.')
  end subroutine test_has_salt

  @Test
  subroutine test_melt_values(this)
    class(test_melt), intent(inout) :: this
    type(cheb1d_scalar_field) :: melt
    real(r8), dimension(resolution), parameter :: ones = 1.0_r8
    call solve_melts(this)
    melt = this%melt1%melt_rate()
    @assertTrue(this%velocity1%component(1)==melt,message='Incorrect melt rate calculated.')
    melt = this%melt2%melt_rate()
    @assertEqual(ones,melt%raw(),tolerance=1.e-15_r8,message='Incorrect melt rate calculated.')
  end subroutine test_melt_values

  @Test
  subroutine test_heat_terms(this)
    class(test_melt), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual, expected
    call solve_melts(this)
    actual = this%melt1%heat_equation_terms()
    expected = (this%beta1+1.0_r8)*this%melt1%melt_rate()
    @assertTrue(expected==actual,message='Incorrect heat terms')
    actual = this%melt2%heat_equation_terms()
    expected = (this%beta2+1.0_r8)*this%melt2%melt_rate()
    @assertTrue(expected==actual,message='Incorrect heat terms')
  end subroutine test_heat_terms

  subroutine solve_melts(this)
    class(test_melt), intent(inout) :: this
    call this%melt1%solve_for_melt(this%velocity1,this%pressure,this%temperature, &
                                   this%salinity,this%plume_thickness,this%time1)
    call this%melt2%solve_for_melt(this%velocity2,this%salinity,this%pressure, &
                                   this%plume_thickness,this%temperature,this%time2)
  end subroutine solve_melts

end module dallaston2015_melt_test

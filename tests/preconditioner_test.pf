!
!  preconditioner_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module preconditioner_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, cheb1d_scalar_field
  use jacobian_block_mod, only: jacobian_block
  use preconditioner_mod, only: preconditioner
  implicit none

  integer, parameter :: resolution = 50

  @TestCase
  type, extends(testcase), public :: test_preconditioner
     type(preconditioner) :: prec1, prec2
     type(jacobian_block), dimension(3,3) :: jacobian
     type(cheb1d_scalar_field), dimension(3) :: vector, rhs
  contains
    procedure :: setup
  end type test_preconditioner

contains

  pure function j11(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j11
    j11 = exp(location(1))
  end function j11
  
  pure function j12(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j12
    j12 = cos(location(1))
  end function j12
  
  pure function j13(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j13
    j13 = sin(location(1))**2
  end function j13
  
  pure function j21(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j21
    j21 = sin(location(1)**2)
  end function j21
  
  pure function j22(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j22
    j22 = location(1)**5 - location(1)**3
  end function j22
  
  pure function j23(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j23
    j23 = location(1)
  end function j23
  
  pure function j31(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j31
    j31 = location(1) * exp(location(1)) + 1._r8
  end function j31
  
  pure function j32(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j32
    j32 = 2._r8
  end function j32
  
  pure function j33(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j33
    j33 = location(1)**2 - location(1) + 1.4_r8
  end function j33
  
  pure function j11_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j11_dx
    j11_dx = exp(location(1))
  end function j11_dx

  pure function j12_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j12_dx
    j12_dx = -sin(location(1))
  end function j12_dx

  pure function j13_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j13_dx
    j13_dx = 2*sin(location(1))*cos(location(1))
  end function j13_dx

  pure function j21_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j21_dx
    j21_dx = 2*location(1)*cos(location(1)**2)
  end function j21_dx

  pure function j22_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j22_dx
    j22_dx = 5._r8*location(1)**4 - 3._r8*location(1)**2
  end function j22_dx

  pure function j23_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j23_dx
    j23_dx = 1._r8
  end function j23_dx

  pure function j31_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j31_dx
    j31_dx = exp(location(1)) + location(1) * exp(location(1))
  end function j31_dx

  pure function j32_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j32_dx
    j32_dx = 0._r8
  end function j32_dx

  pure function j33_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j33_dx
    j33_dx = 2*location(1) -1._r8
  end function j33_dx
  
  pure function j13_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j13_d2x
    j13_d2x = 2*(cos(location(1))**2 - sin(location(1))**2)
  end function j13_d2x

  pure function j22_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: j22_d2x
    j22_d2x = 20._r8*location(1)**3 - 6._r8*location(1)
  end function j22_d2x
  
  pure function v1(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v1
    v1 = 2._r8 + sin(location(1))
  end function v1
  
  pure function v2(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v2
    v2 = location(1)**2
  end function v2
  
  pure function v3(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v3
    v3 = (location(1)-5._r8)**2 + 3._r8*(location(1)-0.1_r8)**2
  end function v3
  
  pure function v1_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v1_dx
    v1_dx = cos(location(1))
  end function v1_dx

  pure function v2_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v2_dx
    v2_dx = 2*location(1)
  end function v2_dx

  pure function v3_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v3_dx
    v3_dx = 2*(location(1)-5._r8) + 6._r8*(location(1)-0.1_r8)
  end function v3_dx
  
  pure function v1_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v1_d2x
    v1_d2x = -sin(location(1))
  end function v1_d2x

  pure function v2_d2x(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: v2_d2x
    v2_d2x = 2._r8
  end function v2_d2x

  subroutine bounds1(rhs,boundary_values,boundary_locations)
    class(scalar_field), intent(in)                  :: rhs
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    integer, dimension(:), allocatable, intent(out)  :: boundary_locations
    boundary_values = [v1([-1._r8])]
    boundary_locations = [rhs%raw_size()]
  end subroutine bounds1

  subroutine bounds2(rhs,boundary_values,boundary_locations)
    class(scalar_field), intent(in)                  :: rhs
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    integer, dimension(:), allocatable, intent(out)  :: boundary_locations
    boundary_values = [v2([1._r8]), v2([-1._r8])]
    boundary_locations = [1,rhs%raw_size()]
  end subroutine bounds2

  subroutine bounds3(rhs,boundary_values,boundary_locations)
    class(scalar_field), intent(in)                  :: rhs
    real(r8), dimension(:), allocatable, intent(out) :: boundary_values
    integer, dimension(:), allocatable, intent(out)  :: boundary_locations
    boundary_values = [v3([1._r8])]
    boundary_locations = [1]
  end subroutine bounds3
  
  subroutine setup(this)
    class(test_preconditioner), intent(inout) :: this
    this%prec1 = preconditioner(1e-2_r8,10)
    this%prec2 = preconditioner(1e-5_r8,50)
    this%jacobian(1,1) = jacobian_block(cheb1d_scalar_field(resolution,j11), &
                                        1, boundaries=bounds1)
    this%jacobian(1,2) = jacobian_block(cheb1d_scalar_field(resolution,j12),1)
    this%jacobian(1,3) = jacobian_block(cheb1d_scalar_field(resolution,j13),1,1)
    this%jacobian(2,1) = jacobian_block(cheb1d_scalar_field(resolution,j21),1)
    this%jacobian(2,2) = jacobian_block(cheb1d_scalar_field(resolution,j22), &
                                        1,1,bounds2)
    this%jacobian(2,3) = jacobian_block(cheb1d_scalar_field(resolution,j23),1)
    this%jacobian(3,1) = jacobian_block(cheb1d_scalar_field(resolution,j31),1)
    this%jacobian(3,2) = jacobian_block(cheb1d_scalar_field(resolution,j32),1)
    this%jacobian(3,3) = jacobian_block(cheb1d_scalar_field(resolution,j33), &
                                        1, boundaries=bounds3)
    this%vector(1) = cheb1d_scalar_field(resolution,v1)
    this%vector(2) = cheb1d_scalar_field(resolution,v2)
    this%vector(3) = cheb1d_scalar_field(resolution,v3)
    this%rhs(1) = this%jacobian(1,1) * this%vector(1) &
                + this%jacobian(1,2) * this%vector(2) &
                + this%jacobian(1,3) * this%vector(3)
    this%rhs(2) = this%jacobian(2,1) * this%vector(1) &
                + this%jacobian(2,2) * this%vector(2) &
                + this%jacobian(2,3) * this%vector(3)
    this%rhs(3) = this%jacobian(3,1) * this%vector(1) &
                + this%jacobian(3,2) * this%vector(2) &
                + this%jacobian(3,3) * this%vector(3)
  end subroutine setup

  @Test
  subroutine test_apply(this)
    class(test_preconditioner), intent(inout) :: this
    class(scalar_field), dimension(:), allocatable :: res
    real(r8), dimension(:), allocatable :: expected, actual
    integer :: i
    expected = [(this%vector(i)%raw(), i = 1, 3)]
    print*,expected
    allocate(res, source=this%prec1%apply(this%jacobian,this%rhs))
    actual = [(res(i)%raw(), i = 1, 3)]
    @assertEqual(expected,actual,tolerance=5.e-3_r8,message='Preconditioner did not converge on correcct result.')
    allocate(res, source=this%prec2%apply(this%jacobian,this%rhs))
    actual = [(res(i)%raw(), i = 1, 3)]
    @assertEqual(expected,actual,tolerance=5.e-5_r8,message='Preconditioner did not converge on correcct result.')
  end subroutine test_apply

end module preconditioner_test

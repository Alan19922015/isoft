!
!  fin_diff_block_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2017 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module pseudospec_block_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, cheb1d_scalar_field, cheb1d_vector_field
  use pseudospectral_block_mod, only: pseudospec_block
  use boundary_types_mod, only: free_boundary, dirichlet
  implicit none

  integer, parameter :: resolution = 50
  
  @TestCase
  type, extends(testcase), public :: test_block
    type(cheb1d_scalar_field) :: scal, scal_dx
    type(cheb1d_vector_field) :: vec, vec_dx
  contains
    procedure :: setup
  end type test_block

contains
  
  pure function f(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f
    f = location(1)**2 + 3._r8*location(1) - 5._r8
  end function f

  pure function f_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_dx
    f_dx = 2._r8*location(1) + 3._r8
  end function f_dx
  
  pure function g(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g
    allocate(g(2))
    g(1) = 1._r8 - location(1) - exp(location(1))
    g(2) = sin(location(1))
  end function g
  
  pure function g_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g_dx
    allocate(g_dx(2))
    g_dx(1) = -1._r8 - exp(location(1))
    g_dx(2) = cos(location(1))
  end function g_dx

  subroutine setup(this)
    class(test_block), intent(inout) :: this
    this%scal = cheb1d_scalar_field(resolution, f)
    this%scal_dx = cheb1d_scalar_field(resolution, f_dx)
    this%vec = cheb1d_vector_field(resolution, g, extra_dims=1)
    this%vec_dx = cheb1d_vector_field(resolution, g_dx, extra_dims=1)
  end subroutine setup

  @Test
  subroutine test_pseudospec_solve_lower_bound(this)
    class(test_block), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_scal
    type(cheb1d_vector_field) :: actual_vec
    type(pseudospec_block) :: block1
    integer, parameter :: bound = -1, depth = 1

    block1 = pseudospec_block(this%scal)

    actual_scal = block1%solve_for(this%scal_dx, bound, this%scal%get_boundary(bound,depth))
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-9_r8,message='Pseudospec block returns wrong sol.')
    actual_scal = actual_scal%d_dx(1)
    @assertEqual(this%scal_dx%raw(),actual_scal%raw(),tolerance=1e-9_r8,message='Pseudospec block returns wrong sol.')

    actual_vec = block1%solve_for(this%vec_dx, bound, this%vec%get_boundary(bound,depth))
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-9_r8,message='Pseudospec block returns wrong sol.')
    actual_vec = actual_vec%d_dx(1)
    @assertEqual(this%vec_dx%raw(),actual_vec%raw(),tolerance=1e-9_r8,message='Pseudospec block returns wrong sol.')
  end subroutine test_pseudospec_solve_lower_bound

  @Test
  subroutine test_pseudospec_solve_upper_bound(this)
    class(test_block), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_scal
    type(cheb1d_vector_field) :: actual_vec
    type(pseudospec_block) :: block2
    integer, parameter :: bound = 1, depth = 1

    block2 = pseudospec_block(this%scal)

    actual_scal = block2%solve_for(this%scal_dx, bound, this%scal%get_boundary(bound,depth))
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-9_r8,message='Pseudospec block returns wrong sol.')
    actual_scal = actual_scal%d_dx(1)
    @assertEqual(this%scal_dx%raw(),actual_scal%raw(),tolerance=1e-9_r8,message='Pseudospec block returns wrong sol.')

    actual_vec = block2%solve_for(this%vec_dx, bound, this%vec%get_boundary(bound, depth))
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-9_r8,message='Pseudospec block returns wrong sol.')
    actual_vec = actual_vec%d_dx(1)
    @assertEqual(this%vec_dx%raw(),actual_vec%raw(),tolerance=1e-9_r8,message='Pseudospec block returns wrong sol.')
  end subroutine test_pseudospec_solve_upper_bound

end module pseudospec_block_test

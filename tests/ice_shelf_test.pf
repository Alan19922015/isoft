!
!  ice_shelf_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module ice_shelf_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use test_utils, only: test_field
  use penf, only: str
  use ice_shelf_mod, only: ice_shelf
  use factual_mod, only: abstract_field, scalar_field, vector_field, &
                         cheb1d_scalar_field, cheb1d_vector_field
  use viscosity_mod, only: abstract_viscosity
  use newtonian_viscosity_mod, only: newtonian_viscosity
  use glacier_boundary_mod, only: glacier_boundary
  use dallaston2015_glacier_boundary_mod, only: dallaston2015_glacier_boundary
  use nitsol_mod
  implicit none

  integer, parameter :: resolution = 50
  real(r8), parameter :: lambda_d = 0.37_r8
  real(r8), parameter :: big_x = 1.0_r8/lambda_d
  real(r8), parameter :: chi_val = 4._r8

  real(r8), parameter :: perturbation = 2.e-3_r8

  @TestCase
  type, extends(testcase) :: test_shelf
    type(ice_shelf) :: shelf1, shelf2, shelf3, shelf4
    integer         :: nodes = resolution
    real(r8)        :: lower1 = 0.0_r8, upper1 = 0.9_r8*big_x
    real(r8)        :: lower2 = -1.0_r8, upper2 = 1.0_r8
    real(r8)        :: temperature = -15._r8, lambda = lambda_d, &
                       chi = chi_val
  contains
    procedure :: setup
  end type test_shelf

contains
  
  pure function thickness1(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    real(r8), dimension(1) :: vel
    vel = velocity1(location)
    thickness = (1._r8 - location(1)/big_x)/vel(1)
  end function thickness1
  
  pure function thickness2(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = 1.0_r8/abs(location(1))
  end function thickness2

  pure function thickness3(location) result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = (1._r8 + perturbation*sin(5*location(1)/big_x)) &
              * thickness1(location)
    !thickness = 1.0_r8 - lambda_d*location(1)
  end function thickness3

  pure function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = sqrt(1._r8 + 0.25_r8*chi_val*big_x - &
                       0.25_r8*chi_val*big_x*(1._r8 - location(1)/big_x)**2)
  end function velocity1

  pure function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = 1.0_r8 - exp(location(1)/8.0_r8)
  end function velocity2

  pure function velocity3(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity = (1._r8 + perturbation*sin(5*location(1)/big_x)) &
             * velocity1(location)
  end function velocity3

  subroutine setup(this)
    class(test_shelf), intent(inout) :: this
    real(r8), dimension(1,2) :: domain1, domain2
    class(abstract_viscosity), allocatable :: visc
    class(glacier_boundary), allocatable :: bound
    allocate(visc, source=newtonian_viscosity(1.0_r8))
    allocate(bound, source=dallaston2015_glacier_boundary(1.0_r8,1.0_r8,chi_val))
    domain1(1,1) = this%lower1
    domain1(1,2) = this%upper1
    domain2(1,1) = this%lower2
    domain2(1,2) = this%upper2
    call this%shelf1%initialise(domain1, [this%nodes], thickness1, velocity1, &
                            this%temperature, visc, bound, this%lambda, this%chi)
    call this%shelf2%initialise(domain2, [this%nodes], thickness2, velocity2)
    this%shelf3 = this%shelf1
    allocate(visc, source=newtonian_viscosity(1.0_r8))
    allocate(bound, source=dallaston2015_glacier_boundary(1.0_r8,1.0_r8,chi_val))
    call this%shelf4%initialise(domain1, [this%nodes], thickness3, velocity3, &
                            this%temperature, visc, bound, this%lambda, this%chi)
    call this%shelf3%set_time(1.0_r8)
  end subroutine setup

  @Test
  subroutine test_thickness(this)
    !! Tests that a shelf returns the thickness field for which it was
    !! initialized.
    class(test_shelf), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_thickness
    type(cheb1d_scalar_field) :: expected_thickness
    expected_thickness = cheb1d_scalar_field(this%nodes, thickness1, &
                                             this%lower1, this%upper1)
    actual_thickness = this%shelf1%ice_thickness()
    call test_field(expected_thickness, actual_thickness)
    expected_thickness = cheb1d_scalar_field(this%nodes, thickness2, &
                                             this%lower2, this%upper2)
    actual_thickness = this%shelf2%ice_thickness()
    call test_field(expected_thickness, actual_thickness)
  end subroutine test_thickness

!$  @Test
!$  subroutine test_velocity(this)
!$    !! Tests that a sheet returns the velocity for which it was 
!$    !! initialized.
!$    class(test_shelf), intent(inout) :: this
!$    type(cheb1d_vector_field) :: actual_thickness
!$    type(cheb1d_vector_field) :: expected_thickness
!$    expected_thickness = cheb1d_scalar_field(this%nodes, velocity1, &
!$                                             this%lower1, this%upper1)
!$    actual_thickness = this%shelf1%velocity_thickness()
!$    call test_field(expected_field, actual_field)
!$    expected_thickness = cheb1d_scalar_field(this%nodes, velocity2, &
!$                                             this%lower2, this%upper2)
!$    actual_thickness = this%shelf2%velocity_thickness()
!$    call test_field(expected_field, actual_field)
!$  end subroutine test_velocity

  @Test
  subroutine test_density(this)
    !! Tests that a shelf returns the density for which it was initialized.
    class(test_shelf), intent(inout) :: this
    @assertEqual(1._r8/1.12_r8,this%shelf1%ice_density(),message='Ice density incorrect')
    !@assertEqual(this%density,this%shelf2%ice_density(),message='Ice density incorrect')
  end subroutine test_density

  @Test
  subroutine test_temperature(this)
    !! Tests that a shelf returns the temperature for which it was initialized.
    class(test_shelf), intent(inout) :: this
    @assertEqual(-15._r8,this%shelf1%ice_temperature(),message='Ice temperature incorrect')
    @assertEqual(this%temperature,this%shelf2%ice_temperature(),message='Ice temperature incorrect')
  end subroutine test_temperature

  pure function water_density(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: water_density
    water_density = 1.0_r8
  end function water_density

  pure function melt_rate(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: melt_rate
    melt_rate = 1.0_r8
  end function melt_rate

  pure function drag_coef(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: drag_coef
    drag_coef = 0.0_r8
  end function drag_coef

  @Test
  subroutine test_residual(this)
    !! Tests the residual for the steady state determined in Dallaston, Hewitt 
    !! and Wells (2016)
    class(test_shelf), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: actual, expected
    type(cheb1d_scalar_field) :: melt, drag
    melt = cheb1d_scalar_field(this%nodes, melt_rate, this%lower1, &
                               this%upper1)
    drag = cheb1d_scalar_field(this%nodes, drag_coef, this%lower1, &
                               this%upper1)
    actual = this%shelf1%residual([this%shelf3],melt,drag,1.0_r8)
    @assertEqual(this%shelf1%data_size(),size(actual),message='Residual array of wronge size')
    allocate(expected(size(actual)))
    expected = 0.0_r8
    @assertEqual(expected,actual,message='Incorrect residual returned.',tolerance=3.e-9_r8)
  end subroutine test_residual

  @Test
  subroutine test_update(this)
    !! Tests two shelves have same state vectors after one is updated with
    !! the state vector of the other.
    class(test_shelf), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: state_vector
    @assertEqual(this%shelf1%data_size(),size(this%shelf1%state_vector()),message='State vector of wrong size')
    @assertNotAll(this%shelf1%state_vector()==this%shelf2%state_vector(),message='Shelf returning wronge state vector')
    call this%shelf2%update(this%shelf1%state_vector())
    @assertEqual(this%shelf1%state_vector(),this%shelf2%state_vector(),message='State vector not updated.')
  end subroutine test_update

  !@Test
  subroutine test_preconditioner(this)
    !! Tests that the preconditioner approximately solves the Jacobian system.
    class(test_shelf), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: actual, expected, rhs, delta
    type(cheb1d_scalar_field) :: melt, drag
    real(r8), parameter :: eps = 1.e-7_r8
    type(ice_shelf) :: old_shelf
    melt = cheb1d_scalar_field(this%nodes, melt_rate, this%lower1, &
                               this%upper1)
    drag = cheb1d_scalar_field(this%nodes, drag_coef, this%lower1, &
                               this%upper1)
    expected = 0.01_r8 * this%shelf1%state_vector()
    old_shelf = this%shelf1
    call old_shelf%set_time(0.1_r8)
    call this%shelf1%set_time(1._r8)
    call this%shelf3%update(this%shelf1%state_vector() + eps*expected)
    rhs = (this%shelf3%residual([old_shelf],melt,drag,1.0_r8) - &
           this%shelf1%residual([old_shelf],melt,drag,1.0_r8))/eps
    actual = this%shelf1%precondition([old_shelf],melt,drag,1.0_r8,rhs)
    delta = this%shelf1%precondition([old_shelf],melt,drag,1.0_r8,expected)
    call this%shelf3%update(this%shelf1%state_vector() + eps*delta)
    actual = (this%shelf3%residual([old_shelf],melt,drag,1.0_r8) - &
              this%shelf1%residual([old_shelf],melt,drag,1.0_r8))/eps
    @assertEqual(expected,actual,message='Preconditioner returns incorrect result', tolerance=2.e-2_r8)
  end subroutine test_preconditioner

  @Test
  subroutine test_integrate_steady(this)
    !! Tests that an ice shelf at the steady state will remain there
    class(test_shelf), intent(inout) :: this
    type(ice_shelf), dimension(1) :: shelf_array
    real(r8) :: dt, time
    real(r8), dimension(:), allocatable :: actual, expected
    integer :: i, steps
    type(cheb1d_scalar_field) :: melt, drag
    logical :: success
    time = 1._r8
    dt = 0.5_r8 * (this%upper1 - this%lower1)/real(this%nodes,r8)
    steps = int(time/dt) + 1
    melt = cheb1d_scalar_field(this%nodes, melt_rate, this%lower1, &
                               this%upper1)
    drag = cheb1d_scalar_field(this%nodes, drag_coef, this%lower1, &
                               this%upper1)
    time = 0._r8
    do i=1,steps
      time = time + dt
      shelf_array(1) = this%shelf1
      call this%shelf1%integrate(shelf_array, melt, drag, 1._r8, time, success)
      @assertTrue(success,message='Integration failed.')
    end do
    expected = this%shelf3%state_vector()
    actual = this%shelf1%state_vector()
    @assertEqual(expected,actual,message='Shelf diverged from steady state.',tolerance=1.e-9_r8)
  end subroutine test_integrate_steady

  @Test
  subroutine test_integrate(this)
    !! Tests that an ice shelf perturbed from the steady state will
    !! evolve back to it
    class(test_shelf), intent(inout) :: this
    type(ice_shelf), dimension(1) :: shelf_array
    real(r8) :: t, time
    real(r8), dimension(:), allocatable :: actual, expected
    integer :: i, steps
    type(cheb1d_scalar_field) :: melt, drag
    logical :: success
    time = 3._r8
    t = this%shelf4%time_step()
    melt = cheb1d_scalar_field(this%nodes, melt_rate, this%lower1, &
                               this%upper1)
    drag = cheb1d_scalar_field(this%nodes, drag_coef, this%lower1, &
                               this%upper1)
    iplvl = 0
    i = -1
    do while(t < time)
      i = i + 1
      shelf_array(1) = this%shelf4
      call this%shelf4%integrate(shelf_array, melt, drag, 1._r8, t, success)
      @assertTrue(success,message='Integration of shelf failed.')
      t = t + this%shelf4%time_step()
    end do
    shelf_array(1) = this%shelf4
    call this%shelf4%integrate(shelf_array, melt, drag, 1._r8, time, success)
    @assertTrue(success,message='Integration of shelf failed.')
    expected = this%shelf1%state_vector()
    actual = this%shelf4%state_vector()
    @assertEqual(expected,actual,message='Shelf did not converge to steady state.',tolerance=5.e-6_r8)
    iplvl = 0
  end subroutine test_integrate

end module ice_shelf_test

!
!  ice_shelf.f90
!  This file is part of ISOFT.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module ice_shelf_test
  !* Author: Christopher MacMackin
  !  Date: April 2016
  !  License: GPLv3
  !
  ! Provides a concrete implementation of the [[glacier]] type, using
  ! a vertically integrated model of an ice shelf.
  !
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use ice_shelf_mod, only: ice_shelf
  use factual_mod, only: scalar_field, vector_field, cheb1d_scalar_field, &
                         cheb1d_vector_field
  implicit none

  integer, parameter :: resolution = 50
  real(r8), parameter :: big_x = 2.702702703

  @TestCase
  type, extends(testcase) :: test_shelf
    type(ice_shelf) :: shelf1, shelf2
    integer         :: nodes = resolution
    real(r8)        :: lower1 = 0.0_r8, upper1 = 2.7_r8
    real(r8)        :: lower2 = -1.0_r8, upper2 = 1.0_r8
    real(r8)        :: density = 1.0_r8, temperature = -15._r8, &
                       lambda = 3.1_r8, chi = 7.0e-5_r8
  contains
    procedure :: setup
  end type test_shelf

contains
  
  function thickness1(location), result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = (1._r8 - location(1)/big_x)/velocity1(location)
  end function thickness1
  
  function thickness2(location), result(thickness)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: thickness
    thickness = 1.0_r8/abs(location(1))
  end function thickness2

  function velocity1(location) result(velocity)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = sqrt(1._r8 + big_x - big_x*(1._r8 - location(1)/big_x))
  end function velocity1

  function velocity2(location) result(velocity)
    real(r8), dimension(:), intent(in)  :: location
    real(r8), dimension(:), allocatable :: velocity
    allocate(velocity(1))
    velocity(1) = 1.0_r8 - exp(location(1)/8.0_r8)
  end function velocity2

  subroutine setup(this)
    class(test_shelf), intent(inout) :: this
    real(r8), dimension(1,2) :: domain1, domain2
    domain1(1,1) = this%lower1
    domain1(1,2) = this%upper1
    domain2(1,1) = this%lower2
    domain2(1,2) = this%upper2
    this%shelf1 = ice_shelf(domain1, this%nodes, thickness1, velocity1)
    this%shelf2 = ice_shelf(domain2, this%nodes, thickness2, velocity2, &
                           this%density, this%temperature, this%lambda, this%chi)
  end subroutine setup

  subroutine test_field(expected, actual)
    class(abstract_field) :: expected, actual
    dom = actual%domain(),.true.)
    @assertEqual(expected%domain(),actual%domain(),message='Incorrect domain returned.')
    @assertEqual(expected%resolution(),actual%resolution(),message='Incorrect resolution returned.')
    select type(expected)
    class is(scalar_field)
      select type(actual)
      class is(scalar_field)
        @assertTrue(expected == actual,message='Incorrect field contents')
      class default
        error stop 1
      end select
    class is(vector_field)
      select type(actual)
      class is(vector_field)
        @assertTrue(expected == actual,message='Incorrect field contents')
      class default
        error stop 1
      end select
    class default
       error stop 1
    end select
  end subroutine test_field

  @Test
  subroutine test_thickness(this)
    class(test_shelf), intent(inout) :: this
    class(cheb1d_scalar_field) :: actual_thickness
    class(cheb1d_scalar_field) :: expected_thickness
    real(r8), dimension(2) :: dom
    integer, dimension(1) :: res
    expected_thickness = cheb1d_scalar_field(this%nodes, thickness1, &
                                             this%lower1, this%upper1)
    actual_thickness = this%shelf1%ice_thickness()
    call test_field(expected_field, actual_field)
    expected_thickness = cheb1d_scalar_field(this%nodes, thickness2, &
                                             this%lower2, this%upper2)
    actual_thickness = this%shelf2%ice_thickness()
    call test_field(expected_field, actual_field)
  end subroutine test_thickness

!$  @Test
!$  subroutine test_velocity(this)
!$    class(test_shelf), intent(inout) :: this
!$    class(cheb1d_vector_field) :: actual_thickness
!$    class(cheb1d_vector_field) :: expected_thickness
!$    real(r8), dimension(2) :: dom
!$    integer, dimension(1) :: res
!$    expected_thickness = cheb1d_scalar_field(this%nodes, velocity1, &
!$                                             this%lower1, this%upper1)
!$    actual_thickness = this%shelf1%velocity_thickness()
!$    call test_field(expected_field, actual_field)
!$    expected_thickness = cheb1d_scalar_field(this%nodes, velocity2, &
!$                                             this%lower2, this%upper2)
!$    actual_thickness = this%shelf2%velocity_thickness()
!$    call test_field(expected_field, actual_field)
!$  end subroutine test_velocity

  @Test
  subroutine test_density(this)
    class(test_shelf), intent(inout) :: this
    @assertEqual(0.889320388_r8,this%shelf1%ice_density(),message='Ice density incorrect')
    @assertEqual(this%density,this%shelf2%ice_density(),message='Ice density incorrect')
  end subroutine test_density

  @Test
  subroutine test_temperature(this)
    class(test_shelf), intent(inout) :: this
    @assertEqual(-10._r8,this%shelf1%ice_temperature(),message='Ice density incorrect')
    @assertEqual(this%temperature,this%shelf2%ice_temperature(),message='Ice density incorrect')
  end subroutine test_temperature

  @Test
  subroutine test_residual(this)
    class(test_shelf), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: actual, expected
    type(cheb1d_scalar_field) :: water, melt, drag
    water = cheb1d_scalar_field(this%nodes, water_density, this%lower1, &
                                this%upper1)
    melt = cheb1d_scalar_field(this%nodes, melt_rate, this%lower1, &
                               this%upper1)
    drag = cheb1d_scalar_field(this%nodes, drag_coef, this%lower1, &
                               this%upper1)
    actual = this%shelf1%residual(this,melt,drag,water)
    @assertEqual(this%shelf1%data_size(),size(actual),message='Residual array of wronge size')
    allocate(expected, mold=actual)
    expected = 0.0_r8
    @assertEqual(expected,actual,message='Incorrect residual returned.')
  contains
    function water_density(location)
      real(r8), dimension(:), intent(in) :: location
      real(r8) :: water_density
      water_density = 1.0_r8
    end function water_density
    function melt_rate(location)
      real(r8), dimension(:), intent(in) :: location
      real(r8) :: melt_rate
      melt_rate = 1.0_r8 
    end function melt_rate
    function drag_coef(location)
      real(r8), dimension(:), intent(in) :: location
      real(r8) :: drag_coef
      zero = 0.0_r8
    end function drag_coef
  end subroutine test_residual

  @Test
  subroutine test_update(this)
    class(test_shelf), intent(inout)    :: this
    real(r8), dimension(:), allocatable :: state_vector
    @assertEqual(this%shelf1%data_size(),size(this%shelf1%state_vector),message='State vector of wrong size')
    @assertNotAll(this%shelf1%state_vector()==this%shelf2%state_vector(),message='Shelf returning wronge state vector')
    call this%shelf2%update(this%shelf1%state_vector())
    @assertEqual(this%shelf1%state_vector,this%shelf2%state_vector,message='State vector not update.')
  end subroutine test_update

end module ice_shelf_test

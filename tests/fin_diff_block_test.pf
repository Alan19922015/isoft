!
!  fin_diff_block_test.pf
!  This file is part of ISOFT.
!  
!  Copyright 2017 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU General Public License as published by
!  the Free Software Foundation; either version 2 of the License, or
!  (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU General Public License for more details.
!  
!  You should have received a copy of the GNU General Public License
!  along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module finn_diff_block_test
  use iso_fortran_env, only: r8 => real64
  use pfunit_mod
  use factual_mod, only: scalar_field, cheb1d_scalar_field, cheb1d_vector_field
  use finite_difference_block_mod, only: fin_diff_block
  use boundary_types_mod, only: free_boundary, dirichlet
  implicit none

  integer, parameter :: resolution = 50
  
  @TestCase
  type, extends(testcase), public :: test_block
    type(cheb1d_scalar_field) :: scal, scal_dx, scal_offset, scal_rhs
    type(cheb1d_vector_field) :: vec, vec_dx, vec_offset, vec_rhs
  contains
    procedure :: setup
  end type test_block

contains
  
  pure function f(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f
    f = location(1)**2 + 3._r8*location(1) - 5._r8
  end function f

  pure function f_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_dx
    f_dx = 2._r8*location(1) + 3._r8
  end function f_dx

  pure function f_offset(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_offset
    f_offset = location(1) + 1._r8
  end function f_offset

  pure function f_rhs(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8) :: f_rhs
    f_rhs = f_dx(location) + f_offset(location)*f(location)
  end function f_rhs
  
  pure function g(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g
    allocate(g(2))
    g(1) = 1._r8 - location(1) - exp(location(1))
    g(2) = sin(location(1))
  end function g
  
  pure function g_dx(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g_dx
    allocate(g_dx(2))
    g_dx(1) = -1._r8 - exp(location(1))
    g_dx(2) = cos(location(1))
  end function g_dx

  pure function g_offset(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g_offset
    allocate(g_offset(2))
    g_offset(1) = location(1) - 100._r8
    g_offset(2) = (location(1) + 1._r8)**2
  end function g_offset

  pure function g_rhs(location)
    real(r8), dimension(:), intent(in) :: location
    real(r8), dimension(:), allocatable :: g_rhs
    allocate(g_rhs(2))
    g_rhs = g_dx(location) + g_offset(location)*g(location)
  end function g_rhs

  subroutine setup(this)
    class(test_block), intent(inout) :: this
    this%scal = cheb1d_scalar_field(resolution, f)
    this%scal_dx = cheb1d_scalar_field(resolution, f_dx)
    this%scal_offset = cheb1d_scalar_field(resolution, f_offset)
    this%scal_rhs = cheb1d_scalar_field(resolution, f_rhs)
    this%vec = cheb1d_vector_field(resolution, g, extra_dims=1)
    this%vec_dx = cheb1d_vector_field(resolution, g_dx, extra_dims=1)
    this%vec_offset = cheb1d_vector_field(resolution, g_offset, extra_dims=1)
    this%vec_rhs = cheb1d_vector_field(resolution, g_rhs, extra_dims=1)
  end subroutine setup

  @Test
  subroutine test_fin_diff_solve_1(this)
    class(test_block), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_scal
    type(cheb1d_vector_field) :: actual_vec
    type(fin_diff_block) :: block1
    integer, parameter :: bound = -1, depth = 1

    block1 = fin_diff_block(this%scal, [resolution], [dirichlet])
    call this%scal_dx%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block1%solve_for(this%scal_dx)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%scal_rhs%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block1%solve_for(this%scal_rhs, this%scal_offset)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')

    call this%vec_dx%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block1%solve_for(this%vec_dx)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%vec_rhs%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block1%solve_for(this%vec_rhs, this%vec_offset)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
  end subroutine test_fin_diff_solve_1

  @Test
  subroutine test_fin_diff_solve_2(this)
    class(test_block), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_scal
    type(cheb1d_vector_field) :: actual_vec
    type(fin_diff_block) :: block2
    integer, parameter :: bound = -1, depth = 1

    block2 = fin_diff_block(this%scal, [1,resolution], [free_boundary,dirichlet])
    call this%scal_dx%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block2%solve_for(this%scal_dx)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%scal_rhs%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block2%solve_for(this%scal_rhs, this%scal_offset)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')

    call this%vec_dx%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block2%solve_for(this%vec_dx)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%vec_rhs%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block2%solve_for(this%vec_rhs, this%vec_offset)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
  end subroutine test_fin_diff_solve_2

  @Test
  subroutine test_fin_diff_solve_3(this)
    class(test_block), intent(inout) :: this
    type(cheb1d_scalar_field) :: actual_scal
    type(cheb1d_vector_field) :: actual_vec
    type(fin_diff_block) :: block3
    integer, parameter :: bound = 1, depth = 1

    block3 = fin_diff_block(this%scal, [1], [dirichlet])
    call this%scal_dx%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block3%solve_for(this%scal_dx)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%scal_rhs%set_boundary(bound, depth, this%scal%get_boundary(bound, depth))
    actual_scal = block3%solve_for(this%scal_rhs, this%scal_offset)
    @assertEqual(this%scal%raw(),actual_scal%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')

    call this%vec_dx%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block3%solve_for(this%vec_dx)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
    call this%vec_rhs%set_boundary(bound, depth, this%vec%get_boundary(bound, depth))
    actual_vec = block3%solve_for(this%vec_rhs, this%vec_offset)
    @assertEqual(this%vec%raw(),actual_vec%raw(),tolerance=1.e-2_r8,message='Failed to solve finite difference system.')
  end subroutine test_fin_diff_solve_3

end module finn_diff_block_test
